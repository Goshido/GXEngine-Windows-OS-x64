#version 330 core


#define VERTEX				0
#define UV_COORD			1
#define SKIN_INDEX			5
#define SKIN_WEIGHT			6
#define MAX_BONES			80
#define MAX_BONES_FLOATS	7 * MAX_BONES

uniform mat4	mod_view_proj_mat;
uniform float	bones[ MAX_BONES_FLOATS ];
 
layout ( location = VERTEX )		in vec3 vPos;
layout ( location = SKIN_INDEX )	in vec4 vIndexes;
layout ( location = SKIN_WEIGHT )	in vec4 vWeights;
layout ( location = UV_COORD )		in vec2 vTexCoord;
 
out vec2 tc;
 
vec3 VertexTransform ( vec3 p, int index )
{
    int i = index * 7;
 
    // restore rotation component ( quaternion )
    float x = bones[ i ];
    float y = bones[ i + 1 ];
    float z = bones[ i + 2 ];
    float w = bones[ i + 3 ];
	
    //original code from DooM 3 SDK
    float xxzz = x * x - z * z;
    float wwyy = w * w - y * y;
    float xw2 = x * w * 2.0;
    float xy2 = x * y * 2.0;
    float xz2 = x * z * 2.0;
    float yw2 = y * w * 2.0;
    float yz2 = y * z * 2.0;
    float zw2 = z * w * 2.0;

    return vec3 (
					( xxzz + wwyy ) * p.x + ( xy2 + zw2 ) * p.y + ( xz2 - yw2 ) * p.z + bones[ i + 4 ],
					( xy2 - zw2 ) * p.x   + ( y * y + w * w - x * x - z * z ) * p.y + ( yz2 + xw2 ) * p.z + bones[ i + 5 ],
					( xz2 + yw2 ) * p.x   + ( yz2 - xw2 ) * p.y + ( wwyy - xxzz ) * p.z + bones[ i + 6 ] 
				);
}

void main ()
{
	tc = vTexCoord;
	vec4 p = vec4 ( 0.0, 0.0, 0.0, 1.0 );
	p.xyz = VertexTransform ( vPos, int ( vIndexes.x ) ) * vWeights.x +
			VertexTransform ( vPos, int ( vIndexes.y ) ) * vWeights.y +
			VertexTransform ( vPos, int ( vIndexes.z ) ) * vWeights.z +
			VertexTransform ( vPos, int ( vIndexes.w ) ) * vWeights.w;
	gl_Position = mod_view_proj_mat * p;
}