#version 330 core


#define VERTEX_STREAM			0
#define UV_STREAM				1
#define NORMAL_STREAM			2
#define TANGENT_STREAM			3
#define BITANGENT_STREAM		4
#define WEIGHT_INDICES_STREAM	5
#define WEIGHTS_STREAM			6

#define MAX_BONES				80


layout ( location = VERTEX_STREAM ) in vec3 vertex;
layout ( location = UV_STREAM ) in vec2 uv;
layout ( location = NORMAL_STREAM ) in vec3 normal;
layout ( location = TANGENT_STREAM ) in vec3 tangent;
layout ( location = BITANGENT_STREAM ) in vec3 bitangent;
layout ( location = WEIGHT_INDICES_STREAM ) in vec4 weightIndices;
layout ( location = WEIGHTS_STREAM ) in vec4 weights;

uniform mat4 bones[ MAX_BONES ];

flat out vec3 v_vertex;
flat out vec2 v_uv;
flat out vec3 v_normal;
flat out vec3 v_tangent;
flat out vec3 v_bitangent;


vec3 VertexSkinning ( const in vec3 p, const in int index )
{
	return ( bones[ index ] * vec4 ( p, 1.0 ) ).xyz;
}

vec3 VectorSkinning ( const in vec3 v, const in int index )
{
	return mat3 ( bones[ index ] ) * v;
}

void main ()
{
	vec3 v = VertexSkinning ( vertex, int ( weightIndices.x ) ) * weights.x;
	v += VertexSkinning ( vertex, int ( weightIndices.y ) ) * weights.y;
	v += VertexSkinning ( vertex, int ( weightIndices.z ) ) * weights.z;
	v += VertexSkinning ( vertex, int ( weightIndices.w ) ) * weights.w;

	v_vertex = v;

	v_uv = uv;

	v = VectorSkinning ( normal, int ( weightIndices.x ) ) * weights.x;
	v += VectorSkinning ( normal, int ( weightIndices.y ) ) * weights.y;
	v += VectorSkinning ( normal, int ( weightIndices.z ) ) * weights.z;
	v += VectorSkinning ( normal, int ( weightIndices.w ) ) * weights.w;

	v_normal = v;

	v = VectorSkinning ( tangent, int ( weightIndices.x ) ) * weights.x;
	v += VectorSkinning ( tangent, int ( weightIndices.y ) ) * weights.y;
	v += VectorSkinning ( tangent, int ( weightIndices.z ) ) * weights.z;
	v += VectorSkinning ( tangent, int ( weightIndices.w ) ) * weights.w;

	v_tangent = v;

	v = VectorSkinning ( bitangent, int ( weightIndices.x ) ) * weights.x;
	v += VectorSkinning ( bitangent, int ( weightIndices.y ) ) * weights.y;
	v += VectorSkinning ( bitangent, int ( weightIndices.z ) ) * weights.z;
	v += VectorSkinning ( bitangent, int ( weightIndices.w ) ) * weights.w;

	v_bitangent = v;
}
