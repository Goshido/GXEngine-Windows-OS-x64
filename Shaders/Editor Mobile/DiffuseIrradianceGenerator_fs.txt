#version 330 core


#define COLOR_SLOT	0
#define DOUBLE_PI	6.283185
#define PI			3.141592
#define HALF_PI		1.570796

const vec3 absoluteForward = vec3 ( 0.0, 0.0, 1.0);
const vec3 absoluteBackward = vec3 ( 0.0, 0.0, -1.0 );
const vec3 absoluteUp = vec3 ( 0.0, 1.0, 0.0 );
const vec3 absoluteDown = vec3 ( 0.0, -1.0, 0.0 );
const vec3 absoluteLeft = vec3 ( -1.0, 0.0, 0.0 );


smooth in vec3 g_locationWorld;

uniform samplerCube environmentSampler;
uniform float angleStep;

out layout ( location = COLOR_SLOT ) vec3 fragmentColor;


void main ()
{
	// V axis is flipped (see 169 page of OpenGL standart)
	vec3 adjustedCubeMapCoords = normalize ( vec3 ( g_locationWorld.x, -g_locationWorld.y, g_locationWorld.z ) );

	vec3 tangent;
	vec3 bitangent;
	
	if ( all ( equal ( adjustedCubeMapCoords, absoluteUp ) ) )
	{
		tangent = absoluteLeft;
		bitangent = absoluteBackward;
	}
	else if ( all ( equal ( adjustedCubeMapCoords, absoluteDown ) ) )
	{
		tangent = absoluteLeft;
		bitangent = absoluteForward;
	}
	else
	{
		vec3 v = cross ( absoluteUp, adjustedCubeMapCoords );
		bitangent = normalize ( cross ( adjustedCubeMapCoords, v ) );
		tangent = cross ( bitangent, adjustedCubeMapCoords );
	}
	
	mat3 tbn = mat3 ( tangent, bitangent, adjustedCubeMapCoords );

	float samples = 0.0;
	vec3 totalIrradiance = vec3 ( 0.0, 0.0, 0.0 );

	for ( float phi = 0.0; phi < DOUBLE_PI; phi += angleStep )
	{
		for ( float theta = 0.0; theta < HALF_PI; theta += angleStep )
		{
			float sinTheta = sin ( theta );
			float cosTheta = cos ( theta );

			vec3 sampleCoordLocal;
			sampleCoordLocal.x = sinTheta * cos ( phi );
			sampleCoordLocal.y = sinTheta * sin ( phi );
			sampleCoordLocal.z = cosTheta;

			totalIrradiance += texture ( environmentSampler, tbn * sampleCoordLocal ).rgb * sinTheta * cosTheta;
			samples++;
		}
	}

	float inverseSamples = 1.0 / samples;
	fragmentColor = PI * totalIrradiance * inverseSamples;
}
