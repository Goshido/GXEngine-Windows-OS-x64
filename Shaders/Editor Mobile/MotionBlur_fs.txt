#version 330 core


#define CYLINDER_FUNCTION_ALPHA_FACTOR		0.95
#define CYLINDER_FUNCTION_BETTA_FACTOR		1.05
#define NO_BLUR_THRESHOLD					0.5
#define BIG_WEIGHT							777.777

#define COLOR_SLOT							0


smooth in vec2 v_uv;

uniform sampler2D velocityNeighborMaxSampler;
uniform sampler2D velocitySampler;
uniform sampler2D depthSampler;
uniform sampler2D imageSampler;

uniform float inverseDepthLimit;
uniform vec2 inverseScreenResolution;
uniform mat4 inverseProjectionMatrix;
uniform float maxBlurSamples;

layout ( location = COLOR_SLOT ) out vec3 outColor;


float GetDepthView ( const in vec2 uv )
{
	vec4 locationCVV;
	locationCVV.xy = gl_FragCoord.xy * inverseScreenResolution * 2.0 - 1.0;
	locationCVV.z = textureLod ( depthSampler, uv, 0.0 ).r * 2.0 - 1.0;
	locationCVV.w = 1.0;

	vec4 homogeneousLocationView = inverseProjectionMatrix * locationCVV;
	return homogeneousLocationView.z / homogeneousLocationView.w;
}

float GetDepthCompareFactor ( const in float a, const in float b )
{
	float rawValue = 1.0 - ( b - a ) * inverseDepthLimit;
	return clamp ( rawValue, 0.0, 1.0 );
}

float ConeFunction ( const in vec2 a, const in vec2 b, const in vec2 c )
{
	float rawValue = 1.0 - length ( a - b ) / length ( c );
	return clamp ( rawValue, 0.0, 1.0 );
}

float CylinderFunction ( const in vec2 a, const in vec2 b, const in vec2 c )
{
	float lengthC = length ( c );
	return 1.0 - smoothstep ( CYLINDER_FUNCTION_ALPHA_FACTOR * lengthC, CYLINDER_FUNCTION_BETTA_FACTOR * lengthC, length ( a - b ) );
}

void main ()
{
	vec2 neighborMaxScreen = maxBlurSamples * ( textureLod ( velocityNeighborMaxSampler, v_uv, 0.0 ).xy * 2.0 - 1.0 );
	float neigborMaxLengthScreen = length ( neighborMaxScreen );

	if ( neigborMaxLengthScreen < NO_BLUR_THRESHOLD )
	{
		outColor = textureLod ( imageSampler, v_uv, 0.0 ).rgb;
		return;
	}

	vec2 velocitySampleScreen = maxBlurSamples * textureLod ( velocitySampler, v_uv, 0.0 ).xy;
	float velocitySampleScreenLength = length ( velocitySampleScreen );
	float weight = BIG_WEIGHT;

	if ( velocitySampleScreenLength != 0.0 )
		weight = 1.0 / velocitySampleScreenLength;

	vec3 sum = textureLod ( imageSampler, v_uv, 0.0 ).rgb * weight;
	float noiseFactor = noise1 ( v_uv.x + v_uv.y ) * 0.5;
	float neighborMaxSamplesScreen = trunc ( neigborMaxLengthScreen );
	float excludeSample = trunc ( ( neighborMaxSamplesScreen - 1.0 ) * 0.5 );
	float depthView = GetDepthView ( v_uv );
	vec2 velocityUV = velocitySampleScreen * inverseScreenResolution;
	vec2 neigborMaxUV = neighborMaxScreen * inverseScreenResolution;

	for ( float i = 0.0; i < excludeSample; i += 1.0 )
	{
		float t = -1.0 + 2.0 * ( ( i + noiseFactor + 1.0 ) / ( neighborMaxSamplesScreen + 1.0 ) );
		vec2 blurUV = v_uv + neigborMaxUV * t;

		float depthBlurView = GetDepthView ( blurUV );
		vec2 velocityBlurUV = maxBlurSamples * ( textureLod ( velocitySampler, blurUV, 0.0 ).xy * 2.0 - 1.0 ) * inverseScreenResolution;

		float foregroundFactor = GetDepthCompareFactor ( depthView, depthBlurView );
		float backgroundFactor = GetDepthCompareFactor ( depthBlurView, depthView );

		float weightFraction = foregroundFactor * ConeFunction ( blurUV, v_uv, velocityBlurUV );
		weightFraction += backgroundFactor * ConeFunction ( v_uv, blurUV, velocityUV );
		weightFraction += CylinderFunction ( blurUV, v_uv, velocityBlurUV ) * CylinderFunction ( v_uv, blurUV, velocityUV ) * 2.0;

		weight += weightFraction;
		sum += weightFraction * textureLod ( imageSampler, blurUV, 0.0 ).rgb;
	}

	for ( float i = excludeSample + 1.0; i < neighborMaxSamplesScreen; i += 1.0 )
	{
		float t = -1.0 + 2.0 * ( ( i + noiseFactor + 1.0 ) / ( neighborMaxSamplesScreen + 1.0 ) );
		vec2 blurUV = v_uv + neigborMaxUV * t;

		float depthBlurView = GetDepthView ( blurUV );
		vec2 velocityBlurUV = maxBlurSamples * ( textureLod ( velocitySampler, blurUV, 0.0 ).xy * 2.0 - 1.0 ) * inverseScreenResolution;

		float foregroundFactor = GetDepthCompareFactor ( depthView, depthBlurView );
		float backgroundFactor = GetDepthCompareFactor ( depthBlurView, depthView );

		float weightFraction = foregroundFactor * ConeFunction ( blurUV, v_uv, velocityBlurUV );
		weightFraction += backgroundFactor * ConeFunction ( v_uv, blurUV, velocityUV );
		weightFraction += CylinderFunction ( blurUV, v_uv, velocityBlurUV ) * CylinderFunction ( v_uv, blurUV, velocityUV ) * 2.0;

		weight += weightFraction;
		sum += weightFraction * textureLod ( imageSampler, blurUV, 0.0 ).rgb;
	}

	outColor = sum / weight;
}
