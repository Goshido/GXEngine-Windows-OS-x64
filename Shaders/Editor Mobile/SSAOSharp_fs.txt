#version 330 core


#define MAX_SAMPLES		64
#define COLOR_SLOT		0


smooth in vec2 v_uv;

uniform sampler2D depthSampler;
uniform sampler2D normalSampler;
uniform sampler2D noiseSampler;

uniform vec3 kernel[ MAX_SAMPLES ];
uniform float maxCheckRadius;
uniform int samples;
uniform float inverseSamples;
uniform float maxDistance;
uniform vec2 noiseScale;

uniform mat4 projectionMatrix;
uniform mat4 inverseProjectionMatrix;

layout ( location = COLOR_SLOT ) out float color;


vec3 GetFragmentLocationView ()
{
	vec4 fragmentCVV;
	fragmentCVV.xy = v_uv * 2.0 - 1.0;
	fragmentCVV.z = texture ( depthSampler, v_uv ).x * 2.0 - 1.0;
	fragmentCVV.w = 1.0;

	vec4 fragmentView = inverseProjectionMatrix * fragmentCVV;
	fragmentView.xyz /= fragmentView.w;

	return fragmentView.xyz;
}

float RestoreDepth ( const in vec3 locationView )
{
	vec4 locationCVV = projectionMatrix * vec4 ( locationView, 1.0 );
	locationCVV.xy /= locationCVV.w;
	vec2 locationUV = locationCVV.xy * 0.5 + 0.5;

	float zCVV = texture ( depthSampler, locationUV ).x * 2.0 - 1.0;

	float depthZ = zCVV * inverseProjectionMatrix[ 2 ][ 2 ] + inverseProjectionMatrix[ 3 ][ 2 ];
	float depthW = zCVV * inverseProjectionMatrix[ 2 ][ 3 ] + inverseProjectionMatrix[ 3 ][ 3 ];
	
	return depthZ / depthW;
}

void main ()
{
	vec3 fragmentLocationView = GetFragmentLocationView ();

	if ( fragmentLocationView.z > maxDistance )
	{
		color = 1.0;
		return;
	}

	vec3 fragmentNormalView = texture ( normalSampler, v_uv ).xyz * 2.0 - 1.0;

	vec3 random;
	random.xy = texture ( noiseSampler, v_uv * noiseScale ).xy * 2.0 - 1.0;
	random.z = 0.0;

	vec3 tangent = normalize ( random - fragmentNormalView * dot ( random, fragmentNormalView ) );
	vec3 bitangent = cross ( fragmentNormalView, tangent );
	mat3 tbn = mat3 ( tangent, bitangent, fragmentNormalView );

	float ambient = 0.0;

	for ( int i = 0; i < samples; i++ )
	{
		vec3 testLocationView = fragmentLocationView + tbn * kernel[ i ];
		float virtualDepthView = RestoreDepth ( testLocationView );

		if ( abs ( testLocationView.z - virtualDepthView ) > maxCheckRadius )
		{
			ambient += 1.0;
			continue;
		}
		
		if ( testLocationView.z < virtualDepthView )
			ambient += 1.0;
	}

	color = ambient * inverseSamples;
}
