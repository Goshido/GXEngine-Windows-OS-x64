#version 330 core


#define ALBEDO_SLOT				0
#define NORMAL_SLOT				1
#define EMISSION_SLOT			2
#define PARAMETER_SLOT			3
#define VELOCITY_BLUR_SLOT		4
#define OBJECT_HI_SLOT			5
#define OBJECT_LOW_SLOT			6


smooth in vec2 v_uvAlbedo;
smooth in vec2 v_uvNormal;
smooth in vec2 v_uvEmission;
smooth in vec2 v_uvParameter;

smooth in vec3 v_normalView;
smooth in vec3 v_tangentView;
smooth in vec3 v_bitangentView;

smooth in vec2 v_velocityBlur;

flat in vec4 v_objectHi;
flat in vec4 v_objectLow;

uniform sampler2D albedoSampler;
uniform vec4 albedoColor;

uniform sampler2D normalSampler;

uniform sampler2D emissionSampler;
uniform vec3 emissionScaledColor;

uniform sampler2D parameterSampler;
uniform vec4 parameterScale;

layout ( location = ALBEDO_SLOT ) out vec4 outAlbedo;
layout ( location = NORMAL_SLOT ) out vec3 outNormal;
layout ( location = EMISSION_SLOT ) out vec3 outEmission;
layout ( location = PARAMETER_SLOT ) out vec4 outParameter;
layout ( location = VELOCITY_BLUR_SLOT ) out vec2 outVelocityBlur;
layout ( location = OBJECT_HI_SLOT ) out vec4 outObjectHi;
layout ( location = OBJECT_LOW_SLOT ) out vec4 outObjectLow;


vec3 GetNormal ()
{
	mat3 tbn = mat3 ( v_tangentView, v_bitangentView, v_normalView );

	vec3 normalLocal = texture ( normalSampler, v_uvNormal ).xyz * 2.0 - 1.0;
	vec3 normalView = normalize ( tbn * normalLocal );

	return normalView * 0.5 + 0.5;
}

void main ()
{
	outAlbedo = texture ( albedoSampler, v_uvAlbedo ) * albedoColor;
	outNormal = GetNormal ();
	outEmission = texture ( emissionSampler, v_uvEmission ).rgb * emissionScaledColor;

	vec4 parameterSample = texture ( parameterSampler, v_uvParameter );
	parameterSample.w = parameterSample.w;
	outParameter = parameterSample * parameterScale;

	outVelocityBlur = v_velocityBlur;
	outObjectHi = v_objectHi;
	outObjectLow = v_objectLow;
}
